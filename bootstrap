#!/bin/bash

TIMEZONE="America/Tijuana"
LOCALE="en_US.UTF-8"

# Logging function
log() {
  echo -e "\033[1;32m[+]\033[0m $1"
}

# Set timezone to America/Tijuana if not already set
CURRENT_TZ=$(timedatectl | grep 'Time zone' | awk '{print $3}')
if [ "$CURRENT_TZ" != "$TIMEZONE" ]; then
  log "Setting timezone to $TIMEZONE"
  sudo timedatectl set-timezone "$TIMEZONE"
else
  log "Timezone is already set to $TIMEZONE"
fi

# Set system locale to en_US.UTF-8 if not already set
log "Checking system locale..."
if ! grep -q "LANG=$LOCALE" /etc/default/locale || ! locale -a | grep -q "${LOCALE_NAME:-${LOCALE%.*}}"; then
  log "Generating and setting locale to $LOCALE."
  sudo locale-gen $LOCALE
  sudo update-locale LANG=$LOCALE
else
  log "Locale is already set to $LOCALE."
fi

# Update and install packages
sudo apt-get update &&
  sudo apt-get upgrade &&
  sudo apt-get install software-properties-common ca-certificates gnupg

# Dotnet
if ! command -v dotnet &>/dev/null; then
  sudo add-apt-repository ppa:dotnet/backports -y
  log "Added .NET apt repository"
else
  log ".NET is already installed"
fi

# Nuget
if [ ! -f /usr/local/bin/nuget.exe ]; then
  sudo curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
  sudo gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
  echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
  log "Installed NuGet and Mono repository"
else
  log "NuGet and Mono repositories are already installed"
fi

cd "$HOME/.dotfiles"
xargs -a $HOME/.dotfiles/packages.txt sudo apt-get install -y
log "Installed packages from packages.txt"

# Don't use mono for .exe files
cli_status=$(update-binfmts --display cli 2>/dev/null)
if [ -n "$cli_status" ]; then
  if ! echo "$cli_status" | grep -q '(disabled)'; then
    log "Disabling mono for .exe files"
    sudo update-binfmts --disable cli
  else
    log "mono for .exe files is already disabled"
  fi
else
  log "cli binfmt not configured, skipping"
fi

# Latex
if ! command -v tectonic &>/dev/null; then
  log "Installing Tectonic"
  sudo snap install tectonic
else
  log "Tectonic is already installed"
fi

# Tmux Plugin Manager
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  log "Installing Tmux Plugin Manager"
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
else
  log "Tmux Plugin Manager already installed"
fi

# Rust
if ! command -v cargo &>/dev/null; then
  log "Installing Rust and Tree-sitter CLI ðŸ¦€"
  curl https://sh.rustup.rs -sSf | sh -s -- -y
else
  log "Rust is already installed."
fi

# Deno
if ! command -v deno &>/dev/null; then
  log "Installing Deno"
  curl -fsSL https://deno.land/install.sh | sh
else
  log "Deno already installed"
fi

# Volta (Node.js version manager)
if ! command -v volta &>/dev/null; then
  log "Installing Volta and the default Node.js version"
  curl https://get.volta.sh | bash
else
  log "Volta is already installed"
fi

# RBenv (Ruby version manager)
if ! command -v rbenv &>/dev/null; then
  log "Installing RBenv and Ruby"
  curl -fsSL https://rbenv.org/install.sh | bash
else
  log "RBenv is already installed"
fi

# Chrome on Linux (for Markdown preview)
if ! command -v google-chrome &>/dev/null; then
  log "Installing Google Chrome"
  wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
  sudo apt-get update && sudo apt-get install google-chrome-stable
else
  log "Google Chrome is already installed"
fi

# Configure symlinks to configs
log "Symlinking dotfiles with Stow"
# TODO: git, btop, ncdu, lazygit, pip, mcphub
stow -d $HOME/.dotfiles/confs -t $HOME -R neovim tmux zsh bat aider

# Symlink Windows directories
log "Symlinking Windows directories"
if [ -d "/mnt/c/Users/carlo/OneDrive/Desktop/" ]; then
  if [ ! -e "$HOME/Desktop" ]; then
    log "Symlinking Windows Desktop"
    ln -s "/mnt/c/Users/carlo/OneDrive/Desktop/" "$HOME/Desktop"
  else
    log "Desktop symlink/directory already exists, skipping."
  fi
else
  log "Windows Desktop not found, skipping symlink."
fi

if [ -d "/mnt/c/Users/carlo/Downloads" ]; then
  if [ ! -e "$HOME/Downloads" ]; then
    log "Symlinking Windows Downloads"
    ln -s "/mnt/c/Users/carlo/Downloads" "$HOME/Downloads"
  else
    log "Downloads symlink/directory already exists, skipping."
  fi
else
  log "Windows Downloads not found, skipping symlink."
fi

# Set up bat theme cache
batcat cache --build

# Set ZSH as default shell if not already set
if [[ "$SHELL" != "/usr/bin/zsh" ]]; then
  log "Setting ZSH as default shell. You may need to log out and back in for this to take full effect."
  chsh -s '/usr/bin/zsh'
fi

# Neovim dependencies
source "$HOME/.cargo/env"
cargo install --locked tree-sitter-cli
